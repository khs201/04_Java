OOP (Object Oriented Programming)

객체는 자신의 속성(값, data)과 기능(동작,행동)을 가지고 있다

ex) 내가(객체) 마우스(객체)를 왼쪽, 오른쪽 버튼을 클릭하는 행위(상호작용)를 할 시 일어나는 일(이벤트)

이러한 객체와 객체간의 상호작용을 컴퓨터로 옮겨놓은게 객체지향 언어

자바의 클래스 하나 하나가 곧 객체

//

객체 지향 4대 특징

1. 캡슐화 (Encapsulation)
- 외부로부터 보호 + 그룹화


2. 상속 (Inheritance)
- 부모 코드를 자식 코드한테 물려주는 것
-> 자식은 본인의 코드를 가지고 있고 거기에 더 해 부모의 코드 또한 다 가지고 있다
-> 한 부모로부터 나온 코드는 모든 자식들이 가지고 있고, 부모의 코드가 바뀐다면 모든 자식들의 코드 또한 바뀐다

3. 다형성 (Polymorphism)
- A라는 코드가 다양한 결과를 낼 수 있다는 개념

4. 추상화 (Abstraction) 
- 추상적인 것 : 백동현x 사람o
 -> 사람의 특징을 나열하는 행위가 곧 추상화 작업 (나이, 주민등록번호, 이름 등 사람이 공통적으로 가지고 있는 것들의 나열)

//

객체 지향 언어 - 클래스

 클래스 : 객체가 가져야 할 속성(값), 기능(메서드)를
   		  글(코드)로 작성해둔 문서(설계도) == 객체를 정의한 것

//

캡슐화 : 클래스를 클래스명으로 감싸는 것 // 클래스의 가장 중요한 목적인 데이터의 직접 접근 제한을 원칙으로 함
        -> 부가 효과로 정보를 은닉한다(캡슐 내부의 정보를 외부에서 볼 수 없기 때문에)
        -> 매개변수와 반환을 통해 내부에 접근을 허용한다
//


------------------------- 정리 -------------------------

- 현실 객체: 현실 세계에서 인식할 수 있는 모든 것을 객체라고 합니다. 예를 들어, 사람, 동물, 차, 집 등이 모두 객체입니다. 
이들은 각각 고유의 속성과 행동을 가지고 있습니다.

- 객체 지향 언어: 객체 지향 언어는 프로그래밍 언어의 한 종류로, 프로그램을 객체들의 모임으로 보고, 
이 객체들이 서로 상호작용하면서 프로그램을 실행하는 방식을 말합니다. 자바, C++, 파이썬 등이 객체 지향 언어에 속합니다.

- 자바 객체: 자바에서 객체는 클래스로부터 생성됩니다. 객체는 클래스에서 정의된 속성과 메서드를 가지며, 
이를 통해 특정 작업을 수행합니다.

- 클래스: 클래스는 객체를 생성하기 위한 틀 또는 설계도로, 객체가 가져야 할 속성(값)과 기능(메서드)를 정의합니다.

- new 연산자: new 연산자는 자바에서 객체를 생성할 때 사용하는 연산자입니다. new 연산자를 사용하여 클래스의 *인스턴스를 생성하면, 
해당 클래스의 객체가 메모리에 할당됩니다.

- 추상화: 추상화는 복잡한 시스템을 간단한 개념으로 변환하는 것을 말합니다. 이를 통해 프로그램의 복잡성을 관리할 수 있습니다.

- 캡슐화: 캡슐화는 객체의 속성과 메서드를 하나로 묶고, 실제 구현 내용 일부를 외부에 감추는 것을 말합니다. 이를 통해 객체의 내부 데이터를 보호하고, 
외부에서는 해당 객체의 메서드만을 통해 접근할 수 있습니다.

- 캡슐화 원칙: 객체의 속성 직접 접근 차단
    1) private: private 키워드를 사용하여 클래스의 멤버 변수를 선언하면, 
    해당 변수는 해당 클래스 내에서만 접근이 가능합니다.
    2) 간접 접근 방법 작성: 간접 접근 방법은 getter와 setter 메서드를 통해 제공됩니다. 
    이 메서드들을 통해 객체의 속성에 안전하게 접근하고 수정할 수 있습니다.

heap 영역 할당 시 변수/요소가 빈칸으로 있을 수 없다!
-> 기본 값이 대입되어 있음

*클래스의 인스턴스 : 클래스의 인스턴스(instance)란, 클래스를 기반으로 생성된 객체를 말합니다. 
클래스는 객체를 생성하기 위한 틀 또는 설계도로, 객체가 가져야 할 속성(값)과 기능(메서드)를 정의합니다.
이 설계도를 바탕으로 실제 객체를 생성하는 과정을 인스턴스화(instantiation)라고 하며, 
이렇게 생성된 객체를 해당 클래스의 인스턴스라고 합니다. 각 인스턴스는 독립적으로 자신의 속성을 가지며, 클래스에 정의된 동일한 행동을 수행할 수 있습니다.
예를 들어, '자동차’라는 클래스가 있다면, 
이를 바탕으로 ‘포르쉐 911’, ‘테슬라 모델 S’ 등의 실제 자동차 객체를 생성할 수 있습니다. 
이런 각각의 자동차 객체는 ‘자동차’ 클래스의 인스턴스입니다. 
이들은 각각 독립적인 속성(색상, 모델명, 제조년도 등)을 가지며, 
주행, 정차 등의 동일한 행동을 수행할 수 있습니다. 

//

필드 == 객체의 속성
 -> 특별한 경우를 제외하고 캡슐화 원칙 적용

정적 : 생성 후 없어지지 않음
    => 프로그램이 실행될 때
    => static 키워드가 작성된 필드/메서드를
    => 메모리 영역에 생성
  [static 메모리 영역 == 정적 메모리 영역]
  * 언제 어디서든, 누구든지 접근 가능
    == 공유 메모리 영역

<->

동적 : 생성, 소멸
-> new 클래스명() : 객체 생성
-> 객체를 참조하는 변수가 없어짐(객체 소멸)

[heap 메모리 영역 == 동적 메모리 영역]

//

생성자 = 객체가 생성될 떄 수행되는 기능
-> 생성과 동시에 수행되어야 하는 기능이 있을 경우
-> 생성과 동시에 필드를 초기화 할 때

기본 생성자 public 클래스명(){}
매개변수 생성자 public 클래스명("네오", "권총");

this란? : 모든 인스턴스의 메서드에 숨겨진 채 존재하는 레퍼런스로, 할당된 객체를 가리킴
함수 실행 시 전달되는 객체의 주소를 자동으로 받음

//

함수(function)
- 프로그램에 정의된 기능(클래스 외부에 작성된 함수)

메서드(method)
- 객체가 가지고 있는 기능(클래스 내부에 작성된 함수)
 
메서드 반환형 메서드 종료시 반환되는 자료형
void :메서드가 아무런 값을 반환하지 않을 때 사용합니다.
기본 자료형 : `int`, `char`, `double`, `boolean` 등과 같은 기본 자료형을 반환할 때 사용합니다.
배열 : 메서드가 배열을 반환할 때 사용합니다. 예를 들어, `int[]`는 정수 배열을 반환합니다.
클래스 : 메서드가 특정 클래스의 인스턴스를 반환할 때 사용합니다. 예를 들어, `String`은 문자열 객체를 반환합니다.



객체(인스턴스) : new 연산자에 의해서 Heap 영역에 class 내용대로 생성(할당)된 것 

배열 : 객체 참조형 변수를 묶음으로 다루는 것 

//

상속(Inheritance) 요약

정의
상속은 한 클래스가 다른 클래스의 필드나 메서드를 사용할 수 있게 하는 기능입니다. 
이를 통해 코드의 재사용성이 높아지고, 관련된 클래스들 간의 공통적인 규약을 정의할 수 있습니다.

목적과 장점
상속의 주요 목적은 코드의 재사용성을 높이는 것입니다. 이로 인해 다음과 같은 장점이 있습니다:
1. 적은 양의 코드로 새로운 클래스를 작성할 수 있습니다.
2. 코드의 추가 및 변경이 용이합니다.
3. 코드의 중복을 제거하여 프로그램의 생산성과 유지보수에 크게 기여합니다.

방법
클래스 간의 상속은 `extends` 키워드를 사용하여 표현합니다. 예를 들어, 
`public class Academy extends Company {}`와 같이 사용합니다.

단일 상속과 다중 상속
자바에서는 단일 상속만을 지원합니다. 즉, 
한 클래스는 오직 하나의 부모 클래스만을 가질 수 있습니다. 
이는 클래스 간의 관계를 명확하게 하고 신뢰성 있는 코드를 작성하는 데 도움을 줍니다.

상속의 특징
1. 모든 클래스는 `Object` 클래스의 후손입니다. `Object` 클래스가 
제공하는 메서드를 오버라이딩하여 메서드를 재구현할 수 있습니다.
2. 부모 클래스의 생성자와 초기화 블록은 상속되지 않습니다. 자식 클래스가 생성될 때, 
부모 클래스의 생성자가 먼저 실행됩니다.
3. 부모의 `private` 멤버는 상속되지만 직접 접근할 수는 없습니다.

`super()`와 `super`
`super()`는 부모 객체의 생성자를 호출하는 메서드입니다. 
`super`는 상속을 통한 자식 클래스 정의 시 해당 자식 클래스의 부모 객체를 가리키는 참조변수입니다.

오버라이딩(Overriding)
오버라이딩은 자식 클래스가 상속 받은 부모 메서드를 재정의(재작성)하는 것입니다. 
메서드 이름, 매개변수, 리턴 타입이 동일해야 하며, 접근 제어자는 부모와 같거나 넓은 범위로 변경 가능합니다.

`final` 예약어
`final` 예약어는 상속이 불가능한 클래스를 정의하거나, 상속 시 오버라이딩이 
불가능한 메서드를 정의하는 데 사용됩니다.

대상에 따른 사용 가능한 제어자, 예약어
- 클래스: `public`, `(default)`, `final`, `abstract`
- 메서드: 모든 접근 제어자, `final`, `abstract`, `static`
- 변수: 모든 접근 제어자, `final`, `static`
- 지역변수: `final`

클래스에 `abstract`와 `final`을 동시에 사용할 수 없으며, 
메서드에 `static`과 `abstract`을 동시에 사용할 수 없습니다. 
또한, `abstract` 메서드의 접근 제어자로 `private`을 사용할 수 없습니다.

//

다형성 (Polymorphism)
자바에서 다형성은 한 타입의 참조 변수를 통해 여러 타입의 객체를 참조할 수 있도록 하는 것을 의미합니다. 
이는 하나의 객체가 여러 가지 형태를 가질 수 있는 것을 의미하는데, 이를 통해 같은 자료형에 여러 가지 객체를 대입하여 다양한 결과를 얻어낼 수 있습니다³. 

자바에서는 이러한 다형성을 부모 클래스 타입의 참조 변수로 자식 클래스 타입의 인스턴스를 참조할 수 있도록 하여 구현하고 있습니다. 
이를 통해 하나의 타입으로 다양한 실행 결과를 얻을 수 있으며 객체를 부품화하여 유지 보수를 용이하게 합니다³. 

다형성 구현 방법은 클래스의 상속이나 인터페이스를 구현하는 자식 클래스에서 메서드를 재정의 (오버라이딩) 하고 자식 클래스를 부모 타입으로 업캐스팅하여 부모 타입의 객체에서 자식 멤버를 참조하여 구현합니다³.

출처: Bing과의 대화, 2024. 2. 7.
(1) [Java] 자바 다형성(Polymorphism) 개념 정리 및 활용 - IT is True. https://bing.com/search?q=%ec%9e%90%eb%b0%94+%eb%8b%a4%ed%98%95%ec%84%b1+%ec%a0%95%ec%9d%98.
(2) [JAVA/자바] 다형성(polymorphism)의 개념/의미/예제 : 네이버 블로그. https://m.blog.naver.com/PostView.naver?blogId=heartflow89&logNo=220979244668.
(3) 코딩의 시작, TCP School. http://tcpschool.com/java/java_polymorphism_concept.
(4) 다형성 - Java. https://opentutorials.org/module/516/6127.


Public class Iphone extends SmartPhone{}
SmartPhone s1 = new Iphone();

SmartPhone 부모 타입 참조 변수가 자식 객체인 Iphone 객체를 참조하는데,
 Iphone 객체 내부에는 부모인 SmartPhone 객체가 존재하므로 SmartPhone 참조 변수는 SmartPhone 객체만 참조한다 SmartPhone 참조 변수가 Iphone 내부의 SmartPhone만 참조 -> 자식인 Iphone 객체가 부모인 SmartPhone 객체로 변한 것 처럼 보인다. 이것이 다향성!


**다형성**은 객체 지향 프로그래밍에서 중요한 개념입니다. 다형성은 코드를 유연하게 만들어주며, 상속과 인터페이스를 통해 구현됩니다. 이를 이해하기 위해 몇 가지 개념을 살펴보겠습니다.

1. **상속 (Inheritance)**:
    - `Iphone` 클래스가 `SmartPhone` 클래스를 상속받았습니다. 이는 `Iphone`이 `SmartPhone`의 모든 기능과 속성을 상속받는다는 의미입니다.
    - 상속을 통해 코드를 재사용하고, 부모 클래스의 기능을 확장할 수 있습니다.

2. **참조 변수 (Reference Variables)**:
    - `s1`은 `SmartPhone` 타입의 참조 변수입니다. 그러나 실제로 `Iphone` 객체를 참조하고 있습니다.
    - 이것이 다형성의 핵심입니다. 부모 클래스 타입의 변수가 자식 클래스 객체를 참조할 수 있습니다.

3. **객체 내부의 객체 (Composition)**:
    - `Iphone` 객체 내부에는 부모 클래스인 `SmartPhone` 객체가 존재합니다.
    - 따라서 `s1`은 `Iphone`의 기능을 사용하면서도 `SmartPhone`의 기능도 접근할 수 있습니다.

이런 다형성을 통해 코드는 더 유연하고 확장 가능하며, 객체 간의 관계를 더 명확하게 표현할 수 있습니다. 자바에서는 이러한 다형성을 통해 코드를 더 효율적으로 작성할 수 있습니다.


instance of 연산자

현재 참조형 변수가 어떤 클래스 형의 객체 주소를 참조하고 있는지 확인 할 때 사용
클래스 타입이 맞으면 true, 맞지 않으면 false 반환

//

추상(Abstract)

추상 클래스 : 추상 메서드만 있는 클래스 
             추상 클래스는 객체 생성 불가능
추상 메서드 : 몸체 없는 메소드(이름만 정한 메서드 == 나중에 만들 예정인 메서드)

추상 클래스와 메서드는 언제 쓰이는가? : 


상속(Inheritance)
- 클래스가 다른 클래스의 필드나 메서드를 사용할 수 있게 하는 기능
- 코드의 재사용성을 높이고, 관련된 클래스들 간의 공통적인 규약을 정의
- 클래스 간의 상속은 extends 키워드를 사용
- 자바에서는 단일 상속만을 지원
- 모든 클래스는 Object 클래스의 후손
- 부모 클래스의 생성자와 초기화 블록은 상속되지 않음
- super()는 부모 객체의 생성자를 호출하는 메서드
- final 예약어는 상속이 불가능한 클래스를 정의하거나, 상속 시 오버라이딩이 불가능한 메서드를 정의하는 데 사용

다형성(Polymorphism)
- 한 타입의 참조 변수를 통해 여러 타입의 객체를 참조할 수 있도록 하는 것
- 하나의 객체가 여러 가지 형태를 가질 수 있음
- 부모 클래스 타입의 참조 변수로 자식 클래스 타입의 인스턴스를 참조할 수 있도록 구현
- 다형성 구현 방법은 클래스의 상속이나 인터페이스를 구현하는 자식 클래스에서 메서드를 재정의 (오버라이딩) 하고 자식 클래스를 부모 타입으로 업캐스팅하여 구현

instance of 연산자
- 현재 참조형 변수가 어떤 클래스 형의 객체 주소를 참조하고 있는지 확인 할 때 사용
- 클래스 타입이 맞으면 true, 맞지 않으면 false 반환

추상(Abstract)
- 추상 클래스 : 추상 메서드만 있는 클래스, 객체 생성 불가능
- 추상 메서드 : 몸체 없는 메소드(이름만 정한 메서드 == 나중에 만들 예정인 메서드)




추상 클래스 전제 조건 (상속, 다형성(업캐스팅))

추상 클래스 : 추상 메서드를 지닌 클래스
             -> 직접 객체 생성 불가능
             -> 부모 타입 참조 변수로는 사용 가능

추상 메서드 : 메서드 정의 코드 {} 가 없는 메서드
            -> 상속 받은 자식이 무조건 재정의
               (오버라이딩 강제화)

상속 받은 객체 생성 시 자식 객체 내 부모 부분에
존재하는 추상 메서드는 동적 바인딩에 의해 무시된다!!
    
자바에서 멤버란???