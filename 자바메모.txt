OOP (Object Oriented Programming)

객체는 자신의 속성(값, data)과 기능(동작,행동)을 가지고 있다

ex) 내가(객체) 마우스(객체)를 왼쪽, 오른쪽 버튼을 클릭하는 행위(상호작용)를 할 시 일어나는 일(이벤트)

이러한 객체와 객체간의 상호작용을 컴퓨터로 옮겨놓은게 객체지향 언어

자바의 클래스 하나 하나가 곧 객체

//

객체 지향 4대 특징

1. 캡슐화 (Encapsulation)
- 외부로부터 보호 + 그룹화


2. 상속 (Inheritance)
- 부모 코드를 자식 코드한테 물려주는 것
-> 자식은 본인의 코드를 가지고 있고 거기에 더 해 부모의 코드 또한 다 가지고 있다
-> 한 부모로부터 나온 코드는 모든 자식들이 가지고 있고, 부모의 코드가 바뀐다면 모든 자식들의 코드 또한 바뀐다

3. 다형성 (Polymorphism)
- A라는 코드가 다양한 결과를 낼 수 있다는 개념

4. 추상화 (Abstraction) 
- 추상적인 것 : 백동현x 사람o
 -> 사람의 특징을 나열하는 행위가 곧 추상화 작업 (나이, 주민등록번호, 이름 등 사람이 공통적으로 가지고 있는 것들의 나열)

//

객체 지향 언어 - 클래스

 클래스 : 객체가 가져야 할 속성(값), 기능(메서드)를
   		  글(코드)로 작성해둔 문서(설계도) == 객체를 정의한 것

//

캡슐화 : 클래스를 클래스명으로 감싸는 것 // 클래스의 가장 중요한 목적인 데이터의 직접 접근 제한을 원칙으로 함
        -> 부가 효과로 정보를 은닉한다(캡슐 내부의 정보를 외부에서 볼 수 없기 때문에)
        -> 매개변수와 반환을 통해 내부에 접근을 허용한다
//


------------------------- 정리 -------------------------

- 현실 객체: 현실 세계에서 인식할 수 있는 모든 것을 객체라고 합니다. 예를 들어, 사람, 동물, 차, 집 등이 모두 객체입니다. 
이들은 각각 고유의 속성과 행동을 가지고 있습니다.

- 객체 지향 언어: 객체 지향 언어는 프로그래밍 언어의 한 종류로, 프로그램을 객체들의 모임으로 보고, 
이 객체들이 서로 상호작용하면서 프로그램을 실행하는 방식을 말합니다. 자바, C++, 파이썬 등이 객체 지향 언어에 속합니다.

- 자바 객체: 자바에서 객체는 클래스로부터 생성됩니다. 객체는 클래스에서 정의된 속성과 메서드를 가지며, 
이를 통해 특정 작업을 수행합니다.

- 클래스: 클래스는 객체를 생성하기 위한 틀 또는 설계도로, 객체가 가져야 할 속성(값)과 기능(메서드)를 정의합니다.

- new 연산자: new 연산자는 자바에서 객체를 생성할 때 사용하는 연산자입니다. new 연산자를 사용하여 클래스의 *인스턴스를 생성하면, 
해당 클래스의 객체가 메모리에 할당됩니다.

- 추상화: 추상화는 복잡한 시스템을 간단한 개념으로 변환하는 것을 말합니다. 이를 통해 프로그램의 복잡성을 관리할 수 있습니다.

- 캡슐화: 캡슐화는 객체의 속성과 메서드를 하나로 묶고, 실제 구현 내용 일부를 외부에 감추는 것을 말합니다. 이를 통해 객체의 내부 데이터를 보호하고, 
외부에서는 해당 객체의 메서드만을 통해 접근할 수 있습니다.

- 캡슐화 원칙: 객체의 속성 직접 접근 차단
    1) private: private 키워드를 사용하여 클래스의 멤버 변수를 선언하면, 
    해당 변수는 해당 클래스 내에서만 접근이 가능합니다.
    2) 간접 접근 방법 작성: 간접 접근 방법은 getter와 setter 메서드를 통해 제공됩니다. 
    이 메서드들을 통해 객체의 속성에 안전하게 접근하고 수정할 수 있습니다.

heap 영역 할당 시 변수/요소가 빈칸으로 있을 수 없다!
-> 기본 값이 대입되어 있음

*클래스의 인스턴스 : 클래스의 인스턴스(instance)란, 클래스를 기반으로 생성된 객체를 말합니다. 
클래스는 객체를 생성하기 위한 틀 또는 설계도로, 객체가 가져야 할 속성(값)과 기능(메서드)를 정의합니다.
이 설계도를 바탕으로 실제 객체를 생성하는 과정을 인스턴스화(instantiation)라고 하며, 
이렇게 생성된 객체를 해당 클래스의 인스턴스라고 합니다. 각 인스턴스는 독립적으로 자신의 속성을 가지며, 클래스에 정의된 동일한 행동을 수행할 수 있습니다.
예를 들어, '자동차’라는 클래스가 있다면, 
이를 바탕으로 ‘포르쉐 911’, ‘테슬라 모델 S’ 등의 실제 자동차 객체를 생성할 수 있습니다. 
이런 각각의 자동차 객체는 ‘자동차’ 클래스의 인스턴스입니다. 
이들은 각각 독립적인 속성(색상, 모델명, 제조년도 등)을 가지며, 
주행, 정차 등의 동일한 행동을 수행할 수 있습니다. 